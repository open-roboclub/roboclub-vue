// Nullable
type N<T> extends T | Null;

type AdminEditable<T> extends T {
    validate() { isAdmin() }
}

isAdmin() { auth != null && prior(root.admins[auth.uid]) != null }

// Define isCurrentUser() function to test if the given user id
// matches the currently signed-in user.
isCurrentUser(uid) { auth != null && auth.uid === uid }

updateOnly(value) { value != null }

createOnly(value) { prior(value) == null && value != null }

path /downloads {
    read() { true }
}

path /robocon {
    read() { true }
}

path /robovoyage {
    read() { true }
}

path /ui {
    read() { true }
}

path /projects {
    read() { true }
    
    path /{projects} is Projects {
        write() { isAdmin() }
    }

    index() { ['ongoing', 'id'] }
}

type Projects {
    name: String,
    ongoing: Boolean,
    image: N<String>,
    id: N<String>,
    team: N<String>,
    youtube: N<String>,
    images: N<Image[]>,
    docs: N<Doc[]>,
    description: N<String>
}

type Image extends String {
}

type Doc {
    name: String,
    url: String
}

path /feedback/{feedback} is String {
    create() { auth != null }
}

path /admins/{admin} {
    read() { isCurrentUser(admin) }
}

// --- User Section ---

path /users {
    read() { isAdmin() }

    path /{id} is User {
        read() { isCurrentUser(id) }
        write() { isCurrentUser(id) && updateOnly(this) }
    }
}

type User {
    uid: Uid,
    email: String,
    emailVerified: Boolean,
    name: String,
    photoURL: String,
    providerData: ProviderData[]

    validate() { this.providerData != null }
}

type Uid extends String {
    validate() { this == auth.uid }
}

type ProviderData {
    displayName: String,
    email: String,
    photoURL: String,
    providerId: String,
    uid: String
}

// --- News Section ---

path /news {
    read() { true }

    index() { ['timestamp'] }

    path /{news} is News {
        read() { true }
        write() { isAdmin() }
    }
}

path /debug/news {
    read() { true }

    path /{news} is News {
        read() { true }
        write() { isAdmin() }

        index() { ['timestamp'] }
    }
}

type News {
    title: N<LengthString>,
    notice: LengthString,
    date: LengthString,
    timestamp: OldTimestamp,
    link: N<LengthString>,
    notification: N<String>
}

type LengthString extends String {
    validate() { this.length >= 5 }
}

type OldTimestamp extends Number {
    validate() { this <= now }
}

// --- Contribution Section ---

path /contribution {
    read() { true }

    path /{contribution} is Contribution {
        write() { isAdmin() }
    }
}

type Contribution {
    contributor: String,
    amount: String,
    purpose: N<String>,
    remark: N<String>
}

// --- Team Section ---

path /team/{year} {
    read() { true }
    
    /info is TeamInfo;
    /members {
        
        index() { ['uid', 'position', 'rank'] }

        /{member} is Member {
            write() {
                isAdmin() || isCurrentUser(data.child('uid').val())
            }
            validate() { updateOnly(this) }

        }
    }
}

type TeamInfo {
    session: String
}

type Member {
    uid: N<AdminEditable<String>>,
    name: String,
    position: AdminEditable<String>,
    rank: Rank,
    thumbnail: N<String>,
    links: N<Links>,
    profile_info: N<ProfileInfo>,
    old_avatars: N<String[]>
}

type Links {
    email: N<String>,
    mobile: N<String>,
    facebook: N<String>,
    linkedin: N<String>,
    twitter: N<String>
}

type ProfileInfo {
    about: N<String>,
    batch: N<String>,
    cv: N<String>,
    interests: N<String[]>,
    projects: N<Project[]>
}

type Project {
    id: String,
    name: String
}

type Rank extends Number {
    validate() { isAdmin() && prior(root.ui.ranks[newData.val()] != null) }
}

// --- Inventory Section ---

path /inventory {
    read() { true }
}

// --- New Members Section ---

path /members {
    write() { true }
    path /registrationNumbers/{registrationNumber} {
        read() { true }
    }
    path /memberList {
        path /{members} is ClubMember {
    }
    read() {
        isAdmin() || isCurrentUser(data.child('uid').val())
    }
    }
}

type ClubMember {
    timestamp: OldTimestamp,
    course: String,
    email: String,
    paymentStatus: Boolean,
    enrollmentNumber: EnrollmentNumber,
    facultyNumber: FacultyNumber,
    mobile: Mobile,
    name: String,
    registrationNumber: RegistrationNumber
}

type RegistrationNumber extends String {
    validate() {this.length == 8}
}

type EnrollmentNumber extends String {
    validate() {this.length == 6}
}

type FacultyNumber extends String {
    validate() {this.length == 8}
}

type Mobile extends String {
    validate() {this.length == 10}
}